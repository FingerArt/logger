apply plugin: 'maven'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP

File lpFile = project.rootProject.file('local.properties')
if (lpFile.exists()) {
  Properties properties = new Properties()
  properties.load(lpFile.newDataInputStream())
  ext['signing.keyId'] = properties.getProperty('signing.keyId', System.getenv('GPG_KEY_ID'))
  ext['signing.password'] = properties.getProperty('signing.password', System.getenv('GPG_SECRET_PASSWORD'))
  ext['signing.secretKeyRingFile'] = properties.getProperty('signing.secretKeyRingFile', System.getenv('GPG_SECRET_KEY_RING_FILE'))
  ext['NEXUS_USERNAME'] = properties.getProperty('nexus.username', System.getenv('NEXUS_USERNAME'))
  ext['NEXUS_PASSWORD'] = properties.getProperty('nexus.password', System.getenv('NEXUS_PASSWORD'))
}

def isReleaseBuild() {
  return version.contains("SNAPSHOT") == false
}

def sonatypeRepositoryUrl
if (isReleaseBuild()) {
  println 'RELEASE BUILD'
  sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
      : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
  println 'DEBUG BUILD'
  sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
      : "https://s01.oss.sonatype.org/content/repositories/snapshots/"
}

afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        pom.artifactId = POM_ARTIFACT_ID
        repository(url: sonatypeRepositoryUrl) {
          try {
            authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
          } catch (Exception ignored) {
            println "mavenUser or mavenPassword is missing"
          }
        }
        pom.project {
          name POM_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
          url POM_URL
          scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
          }
          licenses {
            license {
              name POM_LICENCE_NAME
              url POM_LICENCE_URL
              distribution POM_LICENCE_DIST
            }
          }
          developers {
            developer {
              id POM_DEVELOPER_ID
              name POM_DEVELOPER_NAME
            }
          }
        }
      }
    }
  }
  signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }
  task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
  }
  task androidJavadocsJar(type: Jar) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
  }
  task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
  }
  artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
  }
}

// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  failOnError false
  source = android.sourceSets.main.java.sourceFiles
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}